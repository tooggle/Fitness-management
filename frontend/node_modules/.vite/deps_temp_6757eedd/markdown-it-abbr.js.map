{
  "version": 3,
  "sources": ["../../markdown-it-abbr/index.mjs"],
  "sourcesContent": ["// Enclose abbreviations in <abbr> tags\n//\nexport default function abbr_plugin (md) {\n  const escapeRE        = md.utils.escapeRE\n  const arrayReplaceAt  = md.utils.arrayReplaceAt\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  const OTHER_CHARS      = ' \\r\\n$+<=>^`|~'\n\n  const UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source\n  const UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source\n\n  function abbr_def (state, startLine, endLine, silent) {\n    let labelEnd\n    let pos = state.bMarks[startLine] + state.tShift[startLine]\n    const max = state.eMarks[startLine]\n\n    if (pos + 2 >= max) { return false }\n\n    if (state.src.charCodeAt(pos++) !== 0x2A/* * */) { return false }\n    if (state.src.charCodeAt(pos++) !== 0x5B/* [ */) { return false }\n\n    const labelStart = pos\n\n    for (; pos < max; pos++) {\n      const ch = state.src.charCodeAt(pos)\n      if (ch === 0x5B /* [ */) {\n        return false\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos\n        break\n      } else if (ch === 0x5C /* \\ */) {\n        pos++\n      }\n    }\n\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A/* : */) {\n      return false\n    }\n\n    if (silent) { return true }\n\n    const label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1')\n    const title = state.src.slice(labelEnd + 2, max).trim()\n    if (label.length === 0) { return false }\n    if (title.length === 0) { return false }\n    if (!state.env.abbreviations) { state.env.abbreviations = {} }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title\n    }\n\n    state.line = startLine + 1\n    return true\n  }\n\n  function abbr_replace (state) {\n    const blockTokens = state.tokens\n\n    if (!state.env.abbreviations) { return }\n\n    const regSimple = new RegExp('(?:' +\n      Object.keys(state.env.abbreviations).map(function (x) {\n        return x.substr(1)\n      }).sort(function (a, b) {\n        return b.length - a.length\n      }).map(escapeRE).join('|') +\n    ')')\n\n    const regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])' +\n            '(' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1)\n    }).sort(function (a, b) {\n      return b.length - a.length\n    }).map(escapeRE).join('|') + ')' +\n            '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])'\n\n    const reg = new RegExp(regText, 'g')\n\n    for (let j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') { continue }\n      let tokens = blockTokens[j].children\n\n      // We scan from the end, to keep position when new tags added.\n      for (let i = tokens.length - 1; i >= 0; i--) {\n        const currentToken = tokens[i]\n        if (currentToken.type !== 'text') { continue }\n\n        let pos = 0\n        const text = currentToken.content\n        reg.lastIndex = 0\n        const nodes = []\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) { continue }\n\n        let m\n\n        while ((m = reg.exec(text))) {\n          if (m.index > 0 || m[1].length > 0) {\n            const token = new state.Token('text', '', 0)\n            token.content = text.slice(pos, m.index + m[1].length)\n            nodes.push(token)\n          }\n\n          const token_o = new state.Token('abbr_open', 'abbr', 1)\n          token_o.attrs = [['title', state.env.abbreviations[':' + m[2]]]]\n          nodes.push(token_o)\n\n          const token_t = new state.Token('text', '', 0)\n          token_t.content = m[2]\n          nodes.push(token_t)\n\n          const token_c = new state.Token('abbr_close', 'abbr', -1)\n          nodes.push(token_c)\n\n          reg.lastIndex -= m[3].length\n          pos = reg.lastIndex\n        }\n\n        if (!nodes.length) { continue }\n\n        if (pos < text.length) {\n          const token = new state.Token('text', '', 0)\n          token.content = text.slice(pos)\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, { alt: ['paragraph', 'reference'] })\n\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace)\n};\n"],
  "mappings": "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",
  "names": []
}
